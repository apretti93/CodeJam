<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<root xml:space="preserve">


         
         
  <testFileRunner basedir="/home/ent/mono/CodeJam/2013/Solution/Round1B/"
                  ignore ="false">
				  
				 <!--Osmos-->
    <run checkFile         ="A-small-practice.check"
         className         ="Round1B.Osmos, Round1B"
         createInputMethod ="createInput"
         inputFile         ="A-small-practice.in"
         processInputMethod="processInput"/>
		 
		 
    <run checkFile         ="A-large-practice.check"
         className         ="Round1B.Osmos, Round1B"
         createInputMethod ="createInput"
         inputFile         ="A-large-practice.in"
         processInputMethod="processInput"/>
		 
		 <!-- Probability pennies -->
    <run checkFile         ="B-small-practice.check"
         className         ="Round1B_P2.Diamond, Round1B"
         createInputMethod ="createInput"
         inputFile         ="B-small-practice.in"
         processInputMethod="processInput"/>
    
	<run checkFile         ="B-large-practice.check"
         className         ="Round1B_P2.Diamond, Round1B"
         createInputMethod ="createInput"
         inputFile         ="B-large-practice.in"
         processInputMethod="processInput"/>
		 
    <run checkFile         ="B-small-practice.check"
         className         ="Round1B_P2.Diamond, Round1B"
         createInputMethod ="createInput"
         inputFile         ="B-small-practice.in"
         processInputMethod="processInputSlow"/>
		 		 
    <run checkFile         ="B-large-practice.check"
         className         ="Round1B_P2.Diamond, Round1B"
         createInputMethod ="createInput"
         inputFile         ="B-large-practice.in"
         processInputMethod="processInputSlow"/>
		 
         <!-- Trie -->
		
      <run checkFile         ="C-small-practice.check"
         className         ="Round1B_P3.GarbledEmail, Round1B"
         createInputMethod ="createInput"
         inputFile         ="C-small-practice.in"
         processInputMethod="processInput"/>
   
 
  <run checkFile         ="C-large-practice.check"
         className         ="Round1B_P3.GarbledEmail, Round1B"
         createInputMethod ="createInput"
         inputFile         ="C-large-practice.in"
         processInputMethod="processInput"/>
		 
		 
  </testFileRunner>
  
  <testFileRunner basedir="/home/ent/mono/CodeJam/2013/Solution/Round1C/"
                  ignore ="false">
                  
                  <run checkFile         ="A_small_practice.check"
         className         ="Round1C.Consonants, Round1C"
         createInputMethod ="createInput"
         inputFile         ="A-small-practice.in"
         processInputMethod="processInput"/>
         
         <!-- include / exclude principal -->
          <run checkFile         ="A_small_practice.check"
         className         ="Round1C.Consonants, Round1C"
         createInputMethod ="createInput"
         inputFile         ="A-small-practice.in"
         processInputMethod="processInputBruteForce"/>
         
         <run checkFile         ="A-large-practice.check"
         className         ="Round1C.Consonants, Round1C"
         createInputMethod ="createInput"
         inputFile         ="A-large-practice.in"
         processInputMethod="processInput"/>
         
            <!-- Proof via induction -->
                  <run checkFile         ="B-small-practice.check"
         className         ="Round1C_P2.Pogo, Round1C"
         createInputMethod ="createInput"
         inputFile         ="B-small-practice.in"
         processInputMethod="processInput"/>
         -
		 
		 <run checkFile         ="B-large-practice.correct"
         className         ="Round1C_P2.Pogo, Round1C"
         createInputMethod ="createInput"
         inputFile         ="B-large-practice.in"
         processInputMethod="processInput"/>
         
         <!--Segment Tree-->
		 
		   <run checkFile         ="C-small-practice.check"
         className         ="Round1C.GreatWall, Round1C"
         createInputMethod ="createInput"
         inputFile         ="C-small-practice.in"
         processInputMethod="processInput"/>
		 
		 <run checkFile         ="C-small-practice.check"
         className         ="Round1C.GreatWall, Round1C"
         createInputMethod ="createInput"
         inputFile         ="C-small-practice.in"
         processInputMethod="processInputSmall"/>
		 
		 
		 
		 <run checkFile         ="C-large-practice.check"
         className         ="Round1C.GreatWall, Round1C"
         createInputMethod ="createInput"
         inputFile         ="C-large-practice.in"
         processInputMethod="processInput"/>
		 
         </testFileRunner>
         
         <testFileRunner basedir="/home/ent/mono/CodeJam/2013/Solution/Round2/"
                  ignore ="false">
                  
                  <!-- Stack -->
                  
                   <run checkFile         ="A-small-practice.check"
         className         ="Round2_P1.TicketSwap, Round2"
         createInputMethod ="createInput"
         inputFile         ="A-small-practice.in"
         processInputMethod="processInput"/>
         
          <run checkFile         ="A-large-practice.check"
         className         ="Round2_P1.TicketSwap, Round2"
         createInputMethod ="createInput"
         inputFile         ="A-large-practice.in"
         processInputMethod="processInput"/>
         
         <!-- binary ; understanding problem, simple solution -->
                <run checkFile         ="B-small-practice.check"
         className         ="Round2.ManyPrizes, Round2"
         createInputMethod ="createInput"
         inputFile         ="B-small-practice.in"
         processInputMethod="processInput"/>
         
          <run checkFile         ="B-large-practice.check"
         className         ="Round2.ManyPrizes, Round2"
         createInputMethod ="createInput"
         inputFile         ="B-large-practice.in"
         processInputMethod="processInput"/>
         
         <!-- Longest increasing / decreasing subsequence -->
              <run checkFile         ="C-small-practice.check"
         className         ="Round2_P3.Erdos, Round2"
         createInputMethod ="createInput"
         inputFile         ="C-small-practice.in"
         processInputMethod="processInput"/>
         
           <run checkFile         ="C-large-practice.check"
         className         ="Round2_P3.Erdos, Round2"
         createInputMethod ="createInput"
         inputFile         ="C-large-practice.in"
         processInputMethod="processInput"/>
                  
         </testFileRunner>
         
                  
                  
  <testFileRunner basedir="/home/ent/mono/CodeJam/2013/Solution/Round3/"
                  >
    <run checkFile         ="C-small-practice.correct"
         className         ="Round3.Lost, Round3"
         createInputMethod ="createInput"
         inputFile         ="C-small-practice.in"
         processInputMethod="processInput"/>
    <run checkFile         ="C-small-practice.correct"
         className         ="Round3.Lost,  Round3"
         createInputMethod ="createInput"
         inputFile         ="C-small-practice.in"
         processInputMethod="processInputBruteForce"/>
    <run checkFile         ="C-large-practice.correct"
         className         ="Round3.Lost, Round3"
         createInputMethod ="createInput"
         inputFile         ="C-large-practice.in"
         processInputMethod="processInput"/>
		 
		 <run checkFile         ="D-small-practice.correct"
         className         ="Round3.Wheel, Round3"
         createInputMethod ="createInput"
         inputFile         ="D-small-practice.in"
         processInputMethod="processInputSmall"/>
		 
		 <!--
		 <run checkFile         ="D-small-practice.correct"
         className         ="Round3.Wheel, Round3"
         createInputMethod ="createInput"
         inputFile         ="D-small-practice.in"
         processInputMethod="processInput"/>
		 -->
  </testFileRunner>
  <tests answerType="double"
         className ="Round3.Cheaters, Round3"
         ignore    ="true">
    <test name="TestCheaterSmall3">
      <data>
34 4
1 1 10 10
      </data>
      <answer>.94285714</answer>
    </test>
    <test name="TestCheaterSmall4">
      <data>
36 37
389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 1000 999
      </data>
      <answer>1</answer>
    </test>
    <test name="TestCheaterSmall8">
      <data>
35 4
1000 1000 1 1
      </data>
      <answer>1</answer>
    </test>
    <test name="TestCheaterSmall9">
      <data>
27 35
100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 8 9
      </data>
      <answer>335</answer>
    </test>
  </tests>
  <tests className="Round2.Pong.PongMain"
         ignore   ="true">
    <test name="TestPong1">
      <data>
142513 3
377 723167
63 525077
138485 2 40763 1
      </data>
      <answer>RIGHT 19393</answer>
    </test>
    <test name="TestPong4small">
      <data>
654329 4
81790 755459
1 588891
572631 1 72704 1
      </data>
      <answer>RIGHT 165026</answer>
    </test>
    <test name="TestPong89Small">
      <data>
999999 2
1 1
999989 999989
499999 1 -999998 4
      </data>
      <answer>RIGHT 249996</answer>
    </test>
    <test name="TestPongSample1">
      <data>
6 4
1 2
3 1
5 1 4 8
      </data>
      <answer>LEFT 2</answer>
    </test>
    <test name="TestPongSample4">
      <data>
12 2
1 2
10 2
3 1 13 4
      </data>
      <answer>RIGHT 11</answer>
    </test>
  </tests>
  <tests className="Round3.Lost, Round3"
         ignore   ="false">
    <test name="TestLostSample1">
      <data>
4 5 3
1 2 100 1000
1 3 500 5000
3 2 400 600
3 4 500 5000
4 2 1 10000
2 4 5
      </data>
      <answer>4</answer>
    </test>
    <test name="TestLostSample3">
      <data>
5 6 3
1 3 1 1
4 2 1 9
1 4 1 1
3 5 2 2
5 2 2 2
3 4 1 2
1 6 2
      </data>
      <answer>6</answer>
    </test>
    <test name="TestLostSample2">
      <data>
3 3 2
1 3 1 1
3 2 1 1
1 2 1 2
1 2
      </data>
      <answer>Looks Good To Me</answer>
    </test>
  </tests>
</root>

