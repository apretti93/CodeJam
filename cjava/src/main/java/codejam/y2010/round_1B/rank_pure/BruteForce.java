package codejam.y2010.round_1B.rank_pure;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.google.common.collect.ComparisonChain;

/*
[12]
[2, 12]
[2, 3, 12]
[3, 4, 12]
[3, 5, 12]
[3, 6, 12]
[3, 7, 12]
[3, 8, 12]
[3, 9, 12]
[3, 10, 12]
[3, 11, 12]
[2, 3, 4, 12]
[2, 4, 5, 12]
[2, 4, 6, 12]
[2, 4, 7, 12]
[2, 4, 8, 12]
[2, 4, 9, 12]
[2, 4, 10, 12]
[2, 4, 11, 12]
[4, 5, 6, 12]
[4, 5, 7, 12]
[4, 5, 8, 12]
[4, 5, 9, 12]
[4, 5, 10, 12]
[4, 5, 11, 12]
[4, 6, 7, 12]
[4, 6, 8, 12]
[4, 6, 9, 12]
[4, 6, 10, 12]
[4, 6, 11, 12]
[4, 7, 8, 12]
[4, 7, 9, 12]
[4, 7, 10, 12]
[4, 7, 11, 12]
[4, 8, 9, 12]
[4, 8, 10, 12]
[4, 8, 11, 12]
[4, 9, 10, 12]
[4, 9, 11, 12]
[4, 10, 11, 12]
[2, 3, 4, 5, 12]
[2, 3, 5, 6, 12]
[2, 3, 5, 7, 12]
[2, 3, 5, 8, 12]
[2, 3, 5, 9, 12]
[2, 3, 5, 10, 12]
[2, 3, 5, 11, 12]
[2, 5, 6, 7, 12]
[2, 5, 6, 8, 12]
[2, 5, 6, 9, 12]
[2, 5, 6, 10, 12]
[2, 5, 6, 11, 12]
[2, 5, 7, 8, 12]
[2, 5, 7, 9, 12]
[2, 5, 7, 10, 12]
[2, 5, 7, 11, 12]
[2, 5, 8, 9, 12]
[2, 5, 8, 10, 12]
[2, 5, 8, 11, 12]
[2, 5, 9, 10, 12]
[2, 5, 9, 11, 12]
[2, 5, 10, 11, 12]
[3, 4, 5, 6, 12]
[3, 4, 5, 7, 12]
[3, 4, 5, 8, 12]
[3, 4, 5, 9, 12]
[3, 4, 5, 10, 12]
[3, 4, 5, 11, 12]
[5, 6, 7, 8, 12]
[5, 6, 7, 9, 12]
[5, 6, 7, 10, 12]
[5, 6, 7, 11, 12]
[5, 6, 8, 9, 12]
[5, 6, 8, 10, 12]
[5, 6, 8, 11, 12]
[5, 6, 9, 10, 12]
[5, 6, 9, 11, 12]
[5, 6, 10, 11, 12]
[5, 7, 8, 9, 12]
[5, 7, 8, 10, 12]
[5, 7, 8, 11, 12]
[5, 7, 9, 10, 12]
[5, 7, 9, 11, 12]
[5, 7, 10, 11, 12]
[5, 8, 9, 10, 12]
[5, 8, 9, 11, 12]
[5, 8, 10, 11, 12]
[5, 9, 10, 11, 12]
[2, 3, 4, 5, 6, 12]
[2, 3, 4, 6, 7, 12]
[2, 3, 4, 6, 8, 12]
[2, 3, 4, 6, 9, 12]
[2, 3, 4, 6, 10, 12]
[2, 3, 4, 6, 11, 12]
[2, 3, 6, 7, 8, 12]
[2, 3, 6, 7, 9, 12]
[2, 3, 6, 7, 10, 12]
[2, 3, 6, 7, 11, 12]
[2, 3, 6, 8, 9, 12]
[2, 3, 6, 8, 10, 12]
[2, 3, 6, 8, 11, 12]
[2, 3, 6, 9, 10, 12]
[2, 3, 6, 9, 11, 12]
[2, 3, 6, 10, 11, 12]
[2, 4, 5, 6, 7, 12]
[2, 4, 5, 6, 8, 12]
[2, 4, 5, 6, 9, 12]
[2, 4, 5, 6, 10, 12]
[2, 4, 5, 6, 11, 12]
[2, 6, 7, 8, 9, 12]
[2, 6, 7, 8, 10, 12]
[2, 6, 7, 8, 11, 12]
[2, 6, 7, 9, 10, 12]
[2, 6, 7, 9, 11, 12]
[2, 6, 7, 10, 11, 12]
[2, 6, 8, 9, 10, 12]
[2, 6, 8, 9, 11, 12]
[2, 6, 8, 10, 11, 12]
[2, 6, 9, 10, 11, 12]
[3, 4, 6, 7, 8, 12]
[3, 4, 6, 7, 9, 12]
[3, 4, 6, 7, 10, 12]
[3, 4, 6, 7, 11, 12]
[3, 4, 6, 8, 9, 12]
[3, 4, 6, 8, 10, 12]
[3, 4, 6, 8, 11, 12]
[3, 4, 6, 9, 10, 12]
[3, 4, 6, 9, 11, 12]
[3, 4, 6, 10, 11, 12]
[3, 5, 6, 7, 8, 12]
[3, 5, 6, 7, 9, 12]
[3, 5, 6, 7, 10, 12]
[3, 5, 6, 7, 11, 12]
[3, 5, 6, 8, 9, 12]
[3, 5, 6, 8, 10, 12]
[3, 5, 6, 8, 11, 12]
[3, 5, 6, 9, 10, 12]
[3, 5, 6, 9, 11, 12]
[3, 5, 6, 10, 11, 12]
[6, 7, 8, 9, 10, 12]
[6, 7, 8, 9, 11, 12]
[6, 7, 8, 10, 11, 12]
[6, 7, 9, 10, 11, 12]
[6, 8, 9, 10, 11, 12]
[2, 3, 4, 5, 6, 7, 12]
[2, 3, 4, 5, 7, 8, 12]
[2, 3, 4, 5, 7, 9, 12]
[2, 3, 4, 5, 7, 10, 12]
[2, 3, 4, 5, 7, 11, 12]
[2, 3, 4, 7, 8, 9, 12]
[2, 3, 4, 7, 8, 10, 12]
[2, 3, 4, 7, 8, 11, 12]
[2, 3, 4, 7, 9, 10, 12]
[2, 3, 4, 7, 9, 11, 12]
[2, 3, 4, 7, 10, 11, 12]
[2, 3, 5, 6, 7, 8, 12]
[2, 3, 5, 6, 7, 9, 12]
[2, 3, 5, 6, 7, 10, 12]
[2, 3, 5, 6, 7, 11, 12]
[2, 3, 7, 8, 9, 10, 12]
[2, 3, 7, 8, 9, 11, 12]
[2, 3, 7, 8, 10, 11, 12]
[2, 3, 7, 9, 10, 11, 12]
[2, 4, 5, 7, 8, 9, 12]
[2, 4, 5, 7, 8, 10, 12]
[2, 4, 5, 7, 8, 11, 12]
[2, 4, 5, 7, 9, 10, 12]
[2, 4, 5, 7, 9, 11, 12]
[2, 4, 5, 7, 10, 11, 12]
[2, 4, 6, 7, 8, 9, 12]
[2, 4, 6, 7, 8, 10, 12]
[2, 4, 6, 7, 8, 11, 12]
[2, 4, 6, 7, 9, 10, 12]
[2, 4, 6, 7, 9, 11, 12]
[2, 4, 6, 7, 10, 11, 12]
[2, 7, 8, 9, 10, 11, 12]
[3, 4, 5, 6, 7, 8, 12]
[3, 4, 5, 6, 7, 9, 12]
[3, 4, 5, 6, 7, 10, 12]
[3, 4, 5, 6, 7, 11, 12]
[3, 4, 7, 8, 9, 10, 12]
[3, 4, 7, 8, 9, 11, 12]
[3, 4, 7, 8, 10, 11, 12]
[3, 4, 7, 9, 10, 11, 12]
[3, 5, 7, 8, 9, 10, 12]
[3, 5, 7, 8, 9, 11, 12]
[3, 5, 7, 8, 10, 11, 12]
[3, 5, 7, 9, 10, 11, 12]
[3, 6, 7, 8, 9, 10, 12]
[3, 6, 7, 8, 9, 11, 12]
[3, 6, 7, 8, 10, 11, 12]
[3, 6, 7, 9, 10, 11, 12]
[4, 5, 6, 7, 8, 9, 12]
[4, 5, 6, 7, 8, 10, 12]
[4, 5, 6, 7, 8, 11, 12]
[4, 5, 6, 7, 9, 10, 12]
[4, 5, 6, 7, 9, 11, 12]
[4, 5, 6, 7, 10, 11, 12]
[2, 3, 4, 5, 6, 7, 8, 12]
[2, 3, 4, 5, 6, 8, 9, 12]
[2, 3, 4, 5, 6, 8, 10, 12]
[2, 3, 4, 5, 6, 8, 11, 12]
[2, 3, 4, 5, 8, 9, 10, 12]
[2, 3, 4, 5, 8, 9, 11, 12]
[2, 3, 4, 5, 8, 10, 11, 12]
[2, 3, 4, 6, 7, 8, 9, 12]
[2, 3, 4, 6, 7, 8, 10, 12]
[2, 3, 4, 6, 7, 8, 11, 12]
[2, 3, 4, 8, 9, 10, 11, 12]
[2, 3, 5, 6, 8, 9, 10, 12]
[2, 3, 5, 6, 8, 9, 11, 12]
[2, 3, 5, 6, 8, 10, 11, 12]
[2, 3, 5, 7, 8, 9, 10, 12]
[2, 3, 5, 7, 8, 9, 11, 12]
[2, 3, 5, 7, 8, 10, 11, 12]
[2, 4, 5, 6, 7, 8, 9, 12]
[2, 4, 5, 6, 7, 8, 10, 12]
[2, 4, 5, 6, 7, 8, 11, 12]
[2, 4, 5, 8, 9, 10, 11, 12]
[2, 4, 6, 8, 9, 10, 11, 12]
[2, 4, 7, 8, 9, 10, 11, 12]
[2, 5, 6, 7, 8, 9, 10, 12]
[2, 5, 6, 7, 8, 9, 11, 12]
[2, 5, 6, 7, 8, 10, 11, 12]
[3, 4, 5, 6, 8, 9, 10, 12]
[3, 4, 5, 6, 8, 9, 11, 12]
[3, 4, 5, 6, 8, 10, 11, 12]
[3, 4, 5, 7, 8, 9, 10, 12]
[3, 4, 5, 7, 8, 9, 11, 12]
[3, 4, 5, 7, 8, 10, 11, 12]
[4, 5, 6, 8, 9, 10, 11, 12]
[4, 5, 7, 8, 9, 10, 11, 12]
[4, 6, 7, 8, 9, 10, 11, 12]
[2, 3, 4, 5, 6, 7, 8, 9, 12]
[2, 3, 4, 5, 6, 7, 9, 10, 12]
[2, 3, 4, 5, 6, 7, 9, 11, 12]
[2, 3, 4, 5, 6, 9, 10, 11, 12]
[2, 3, 4, 5, 7, 8, 9, 10, 12]
[2, 3, 4, 5, 7, 8, 9, 11, 12]
[2, 3, 4, 6, 7, 9, 10, 11, 12]
[2, 3, 4, 6, 8, 9, 10, 11, 12]
[2, 3, 5, 6, 7, 8, 9, 10, 12]
[2, 3, 5, 6, 7, 8, 9, 11, 12]
[2, 3, 6, 7, 8, 9, 10, 11, 12]
[2, 4, 5, 6, 7, 9, 10, 11, 12]
[2, 4, 5, 6, 8, 9, 10, 11, 12]
[3, 4, 5, 6, 7, 8, 9, 10, 12]
[3, 4, 5, 6, 7, 8, 9, 11, 12]
[3, 4, 6, 7, 8, 9, 10, 11, 12]
[3, 5, 6, 7, 8, 9, 10, 11, 12]
[2, 3, 4, 5, 6, 7, 8, 9, 10, 12]
[2, 3, 4, 5, 6, 7, 8, 10, 11, 12]
[2, 3, 4, 5, 6, 8, 9, 10, 11, 12]
[2, 3, 4, 6, 7, 8, 9, 10, 11, 12]
[2, 4, 5, 6, 7, 8, 9, 10, 11, 12]
[2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]

 */
public class BruteForce
{

    public static int showPattern(int n) {
        List<Integer> list = new ArrayList<Integer>(n-1);
        
        for(int i = 2; i <= n; ++i) {
            list.add(i);
        }
        /*
Operators    Precedence
postfix expr++ expr--
unary   ++expr --expr +expr -expr ~ !
multiplicative  * / %
additive    + -
shift   << >> >>>
relational  < > <= >= instanceof
equality    == !=
bitwise AND &
bitwise exclusive OR    ^
bitwise inclusive OR    |
logical AND &&
logical OR  ||
ternary ? :
assignment  = += -= *= /= %= &= ^= |= <<= >>= >>>=

         */
        
        List<List<Integer>> pureList = new ArrayList<>();
        
        int allSubSets = (1 << list.size() - 1) - 1;
        int isPureCount = 0;
        
        for(int subSet = allSubSets; subSet >= 0; --subSet) {
            List<Integer> subList = new ArrayList<Integer>(n-1);
            for(int i = 2; i < n; ++i) {
                if (( 1 << i-2 & subSet) != 0  ) {
                    subList.add(i);
                }
            }
            subList.add(n);
            
            boolean isPure = isPure(subList);
            
            if (isPure) {
                ++isPureCount;
                //log.debug("Sub set {}.  ss {}  isPure {}", subList, subSet, isPure);
                pureList.add(subList);
            }
        }
        
       // boolean r = isPure(list);
        
        Collections.sort(pureList, new Comparator<List<Integer>>() {

            @Override
            public int compare(List<Integer> o1, List<Integer> o2) {
                
                ComparisonChain cc = ComparisonChain.start().compare(o1.size(), o2.size());
                
                if (cc.result() != 0) {
                    return cc.result();
                }
                
                for(int i = 0; i < o1.size(); ++i) {
                    cc = cc.compare(o1.get(i), o2.get(i));
                    }
                
                return cc.result();
            }
            
        });
        
        for(List<Integer> pl : pureList) {
            log.debug("{}", pl);
        }
        
        return isPureCount;
    }
    
    public static boolean isPure(List<Integer> set) {
        //int start = set.get(set.size() -1);
        
        int value = set.get( set.size() - 1);
        while(true) {
            int rank = set.indexOf(value) + 1;
            if (rank == 1) {
                return true;
            }
           
          if (rank == value) {
              return false;
          } else if (rank == 1) {
              return true;
          }
          value = rank;
        }
    }
    
    final static Logger log = LoggerFactory.getLogger(BruteForce.class);

}
