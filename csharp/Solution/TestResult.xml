<?xml version="1.0" encoding="utf-8" standalone="no"?>
<!--This file represents the results of running a test suite-->
<test-results name="UnitTest.dll" total="99" failures="2" not-run="0" date="2014-05-27" time="10:25:04">
  <environment nunit-version="2.4.8.0" clr-version="4.0.30319.1" os-version="Unix 3.14.4.200" platform="Unix" cwd="/home/ent/mono/CodeJam/csharp/Solution" machine-name="b016763" user="ent" user-domain="b016763" />
  <culture-info current-culture="fr-FR" current-uiculture="fr-FR" />
  <test-suite name="UnitTest.dll" success="False" time="30.989" asserts="0">
    <results>
      <test-suite name="Priority_Queue_Tests" success="True" time="0.052" asserts="0">
        <results>
          <test-suite name="HeapPriorityQueueTests" success="True" time="0.028" asserts="0">
            <results>
              <test-case name="Priority_Queue_Tests.HeapPriorityQueueTests.TestAddingDifferentNodesLater" executed="True" success="True" time="0.009" asserts="30" />
              <test-case name="Priority_Queue_Tests.HeapPriorityQueueTests.TestAddingSameNodesLater" executed="True" success="True" time="0.001" asserts="30" />
              <test-case name="Priority_Queue_Tests.HeapPriorityQueueTests.TestBackwardOrder" executed="True" success="True" time="0.000" asserts="15" />
              <test-case name="Priority_Queue_Tests.HeapPriorityQueueTests.TestClear" executed="True" success="True" time="0.001" asserts="11" />
              <test-case name="Priority_Queue_Tests.HeapPriorityQueueTests.TestForwardOrder" executed="True" success="True" time="0.000" asserts="15" />
              <test-case name="Priority_Queue_Tests.HeapPriorityQueueTests.TestMoreComplicatedQueue" executed="True" success="True" time="0.002" asserts="75" />
              <test-case name="Priority_Queue_Tests.HeapPriorityQueueTests.TestOrderedQueue" executed="True" success="True" time="0.000" asserts="15" />
              <test-case name="Priority_Queue_Tests.HeapPriorityQueueTests.TestSanity" executed="True" success="True" time="0.001" asserts="3" />
              <test-case name="Priority_Queue_Tests.HeapPriorityQueueTests.TestSimpleQueue" executed="True" success="True" time="0.000" asserts="15" />
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite name="UnitTest" success="False" time="30.717" asserts="0">
        <results>
          <test-suite name="TestBinaryTree" success="True" time="0.889" asserts="0">
            <results>
              <test-case name="UnitTest.TestBinaryTree.testBinaryTree" executed="True" success="True" time="0.002" asserts="45" />
              <test-case name="UnitTest.TestBinaryTree.TestHeight" executed="True" success="True" time="0.000" asserts="9" />
              <test-case name="UnitTest.TestBinaryTree.testIntervalTree" executed="True" success="True" time="0.887" asserts="4000000" />
            </results>
          </test-suite>
          <test-suite name="TestBitSet" success="True" time="0.002" asserts="0">
            <results>
              <test-case name="UnitTest.TestBitSet.TestBasic" executed="True" success="True" time="0.001" asserts="157" />
              <test-case name="UnitTest.TestBitSet.TestToString" executed="True" success="True" time="0.001" asserts="4" />
            </results>
          </test-suite>
          <test-suite name="TestCantStop" success="False" time="0.012" asserts="0">
            <results>
              <test-case name="UnitTest.TestCantStop.TestBestInterval" executed="True" success="False" time="0.012" asserts="0">
                <failure>
                  <message><![CDATA[System.ArgumentException : empty]]></message>
                  <stack-trace><![CDATA[at RoundFinal.CantStop.bestInterval (System.Int32& bestStart, System.Int32& bestLength, Int32 left, Int32 right, RoundFinal.CantStopInput input) [0x00174] in /home/ent/mono/CodeJam/csharp/Solution/2013/RoundFinal/CantStop.cs:196
at UnitTest.TestCantStop.TestBestInterval () [0x00127] in /home/ent/mono/CodeJam/csharp/Solution/UnitTest/2013/RoundFinal/TestCantStop.cs:53
at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (System.Reflection.MonoMethod,object,object[],System.Exception&)
at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x000d5] in /builddir/build/BUILD/mono-2.10.8/mcs/class/corlib/System.Reflection/MonoMethod.cs:226
]]></stack-trace>
                </failure>
              </test-case>
            </results>
          </test-suite>
          <test-suite name="TestCombinationClasses" success="True" time="0.004" asserts="0">
            <results>
              <test-case name="UnitTest.TestCombinationClasses.TestCombin" executed="True" success="True" time="0.001" asserts="2" />
              <test-case name="UnitTest.TestCombinationClasses.TestCombinationIterator" executed="True" success="True" time="0.001" asserts="5" />
              <test-case name="UnitTest.TestCombinationClasses.TestPermutationWithRep" executed="True" success="True" time="0.002" asserts="6" />
            </results>
          </test-suite>
          <test-suite name="TestConsonants" success="True" time="0.016" asserts="0">
            <results>
              <test-case name="UnitTest.TestConsonants.Test1" executed="True" success="True" time="0.001" asserts="1" />
              <test-case name="UnitTest.TestConsonants.Test2" executed="True" success="True" time="0.000" asserts="1" />
              <test-case name="UnitTest.TestConsonants.Test3" executed="True" success="True" time="0.000" asserts="1" />
              <test-case name="UnitTest.TestConsonants.Test4" executed="True" success="True" time="0.000" asserts="1" />
              <test-case name="UnitTest.TestConsonants.Test5" executed="True" success="True" time="0.000" asserts="1" />
              <test-case name="UnitTest.TestConsonants.Test6" executed="True" success="True" time="0.000" asserts="1" />
              <test-case name="UnitTest.TestConsonants.Test7" executed="True" success="True" time="0.000" asserts="1" />
              <test-case name="UnitTest.TestConsonants.Test8" executed="True" success="True" time="0.000" asserts="1" />
              <test-case name="UnitTest.TestConsonants.Test9" executed="True" success="True" time="0.000" asserts="1" />
              <test-case name="UnitTest.TestConsonants.TestMethod" executed="True" success="True" time="0.012" asserts="3586" />
            </results>
          </test-suite>
          <test-suite name="TestDrummer" success="True" time="0.001" asserts="0">
            <results>
              <test-case name="UnitTest.TestDrummer.Test" executed="True" success="True" time="0.001" asserts="1" />
            </results>
          </test-suite>
          <test-suite name="TestGeom" success="True" time="0.013" asserts="0">
            <results>
              <test-case name="UnitTest.TestGeom.TestConvexHull" executed="True" success="True" time="0.006" asserts="7" />
              <test-case name="UnitTest.TestGeom.TestConvexHull2" executed="True" success="True" time="0.000" asserts="8" />
              <test-case name="UnitTest.TestGeom.TestConvexHull3" executed="True" success="True" time="0.000" asserts="40" />
              <test-case name="UnitTest.TestGeom.TestIntersection" executed="True" success="True" time="0.000" asserts="2" />
              <test-case name="UnitTest.TestGeom.TestPolarOrder" executed="True" success="True" time="0.000" asserts="8" />
              <test-case name="UnitTest.TestGeom.TestPolygon" executed="True" success="True" time="0.003" asserts="2" />
              <test-case name="UnitTest.TestGeom.TestSameSide" executed="True" success="True" time="0.001" asserts="2" />
            </results>
          </test-suite>
          <test-suite name="TestGraduation" success="True" time="0.010" asserts="0">
            <results>
              <test-case name="UnitTest.TestGraduation.Test3rdBackIntersection" executed="True" success="True" time="0.005" asserts="3">
                <categories>
                  <category name="current" />
                </categories>
              </test-case>
              <test-case name="UnitTest.TestGraduation.TestBackward" executed="True" success="True" time="0.001" asserts="9" />
              <test-case name="UnitTest.TestGraduation.TestBeforeAndAfterIntersection" executed="True" success="True" time="0.000" asserts="3">
                <categories>
                  <category name="current" />
                </categories>
              </test-case>
              <test-case name="UnitTest.TestGraduation.TestForward" executed="True" success="True" time="0.001" asserts="9">
                <categories>
                  <category name="current" />
                </categories>
              </test-case>
              <test-case name="UnitTest.TestGraduation.TestForwardExitBefore" executed="True" success="True" time="0.000" asserts="3">
                <categories>
                  <category name="current" />
                </categories>
              </test-case>
              <test-case name="UnitTest.TestGraduation.TestNegMod" executed="True" success="True" time="0.000" asserts="1" />
              <test-case name="UnitTest.TestGraduation.TestStartSamePoint" executed="True" success="True" time="0.000" asserts="3">
                <categories>
                  <category name="current" />
                </categories>
              </test-case>
            </results>
          </test-suite>
          <test-suite name="TestManyPrizes" success="True" time="0.002" asserts="0">
            <results>
              <test-case name="UnitTest.TestManyPrizes.TestManyPrizes1" executed="True" success="True" time="0.002" asserts="20" />
            </results>
          </test-suite>
          <test-suite name="TestMath" success="True" time="0.010" asserts="0">
            <results>
              <test-case name="UnitTest.TestMath.TestDiffs" executed="True" success="True" time="0.000" asserts="3" />
              <test-case name="UnitTest.TestMath.TestInc" executed="True" success="True" time="0.000" asserts="5" />
              <test-case name="UnitTest.TestMath.TestLargeFractionToDouble" executed="True" success="True" time="0.008" asserts="5" />
              <test-case name="UnitTest.TestMath.TestModdedLongArithmetic" executed="True" success="True" time="0.000" asserts="2" />
              <test-case name="UnitTest.TestMath.TestRef" executed="True" success="True" time="0.000" asserts="1" />
            </results>
          </test-suite>
          <test-suite name="TestModMath" success="True" time="0.014" asserts="0">
            <results>
              <test-case name="UnitTest.TestModMath.TestGCD" executed="True" success="True" time="0.000" asserts="1" />
              <test-case name="UnitTest.TestModMath.TestModInverse" executed="True" success="True" time="0.014" asserts="941" />
            </results>
          </test-suite>
          <test-suite name="TestPogo" success="True" time="0.004" asserts="0">
            <results>
              <test-case name="UnitTest.TestPogo.test1" executed="True" success="True" time="0.002" asserts="1" />
              <test-case name="UnitTest.TestPogo.testBasic" executed="True" success="True" time="0.001" asserts="441" />
            </results>
          </test-suite>
          <test-suite name="TestPong" success="True" time="0.584" asserts="0">
            <results>
              <test-case name="UnitTest.TestPong.TestCalcToTarget" executed="True" success="True" time="0.005" asserts="1" />
              <test-case name="UnitTest.TestPong.TestCalcToTarget2" executed="True" success="True" time="0.000" asserts="1" />
              <test-case name="UnitTest.TestPong.TestCalcToTarget3" executed="True" success="True" time="0.000" asserts="1" />
              <test-case name="UnitTest.TestPong.TestCalcToTarget4" executed="True" success="True" time="0.002" asserts="5" />
              <test-case name="UnitTest.TestPong.TestCalcToTargetUsingRand" executed="True" success="True" time="0.039" asserts="500" />
              <test-case name="UnitTest.TestPong.testFirstHit" executed="True" success="True" time="0.005" asserts="21990" />
              <test-case name="UnitTest.TestPong.testForbiddenInterval" executed="True" success="True" time="0.505" asserts="15984" />
              <test-case name="UnitTest.TestPong.testForbiddenIntervalSmall2" executed="True" success="True" time="0.007" asserts="182" />
              <test-case name="UnitTest.TestPong.testFrac" executed="True" success="True" time="0.000" asserts="1" />
              <test-case name="UnitTest.TestPong.TestLarge17" executed="True" success="True" time="0.016" asserts="1" />
              <test-case name="UnitTest.TestPong.TestSmall2" executed="True" success="True" time="0.000" asserts="1" />
              <test-case name="UnitTest.TestPong.TestSmall63" executed="True" success="True" time="0.000" asserts="1" />
            </results>
          </test-suite>
          <test-suite name="TestRunner" success="False" time="28.783" asserts="0">
            <results>
              <test-case name="UnitTest.TestRunner.runAllTestFiles" executed="True" success="False" time="28.760" asserts="2320">
                <failure>
                  <message><![CDATA[System.Reflection.TargetInvocationException : Exception has been thrown by the target of an invocation.
  ----> System.ArgumentException : 00FF00]]></message>
                  <stack-trace><![CDATA[at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x000eb] in /builddir/build/BUILD/mono-2.10.8/mcs/class/corlib/System.Reflection/MonoMethod.cs:234
at System.Reflection.MethodBase.Invoke (System.Object obj, System.Object[] parameters) [0x00000] in /builddir/build/BUILD/mono-2.10.8/mcs/class/corlib/System.Reflection/MethodBase.cs:96
at UnitTest.TestRunner.runTestFile (UnitTest.MainTestData testData) [0x000ac] in /home/ent/mono/CodeJam/csharp/Solution/UnitTest/TestRunner.cs:164
at UnitTest.TestRunner.runAllTestFiles () [0x00019] in /home/ent/mono/CodeJam/csharp/Solution/UnitTest/TestRunner.cs:311
at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (System.Reflection.MonoMethod,object,object[],System.Exception&)
at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x000d5] in /builddir/build/BUILD/mono-2.10.8/mcs/class/corlib/System.Reflection/MonoMethod.cs:226
--ArgumentException
at Utils.geom.Color.create (System.String color) [0x0002c] in /home/ent/mono/CodeJam/csharp/Solution/Utils/geom/GeomXmlWriter.cs:41
at Utils.geom.Style`1[Utils.geom.ShapeStyle].getStyle (System.String colorStr, System.Collections.Generic.Dictionary`2 styleMap) [0x00000] in /home/ent/mono/CodeJam/csharp/Solution/Utils/geom/GeomXmlWriter.cs:81
at Utils.geom.Style`1[Utils.geom.ShapeStyle].getStyle (System.String colorStr) [0x00000] in /home/ent/mono/CodeJam/csharp/Solution/Utils/geom/GeomXmlWriter.cs:99
at Utils.geom.Drawing.AddPolygon (IEnumerable`1 polygon, System.String color) [0x0000f] in /home/ent/mono/CodeJam/csharp/Solution/Utils/geom/GeomXmlWriter.cs:260
at RoundFinal.Drummer.processInput (RoundFinal.DrummerInput input) [0x000fe] in /home/ent/mono/CodeJam/csharp/Solution/2013/RoundFinal/Drummer.cs:71
at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (System.Reflection.MonoMethod,object,object[],System.Exception&)
at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x000d5] in /builddir/build/BUILD/mono-2.10.8/mcs/class/corlib/System.Reflection/MonoMethod.cs:226
]]></stack-trace>
                </failure>
              </test-case>
            </results>
          </test-suite>
          <test-suite name="TestStory" success="True" time="0.006" asserts="0">
            <results>
              <test-case name="UnitTest.TestStory.TestCountDP" executed="True" success="True" time="0.003" asserts="110" />
              <test-case name="UnitTest.TestStory.TestCountSubSeqBruteForce" executed="True" success="True" time="0.001" asserts="4" />
              <test-case name="UnitTest.TestStory.TestOrder" executed="True" success="True" time="0.001" asserts="6" />
            </results>
          </test-suite>
          <test-suite name="TestTrie" success="True" time="0.002" asserts="0">
            <results>
              <test-case name="UnitTest.TestTrie.testAddWord" executed="True" success="True" time="0.001" asserts="5" />
              <test-case name="UnitTest.TestTrie.testBasicMatches" executed="True" success="True" time="0.000" asserts="3" />
              <test-case name="UnitTest.TestTrie.testMatches" executed="True" success="True" time="0.000" asserts="9" />
            </results>
          </test-suite>
          <test-suite name="TestUtils" success="True" time="0.007" asserts="0">
            <results>
              <test-case name="UnitTest.TestUtils.testBinarySearch" executed="True" success="True" time="0.000" asserts="8" />
              <test-case name="UnitTest.TestUtils.testDIS" executed="True" success="True" time="0.001" asserts="5" />
              <test-case name="UnitTest.TestUtils.testEquality" executed="True" success="True" time="0.000" asserts="4" />
              <test-case name="UnitTest.TestUtils.testLIS" executed="True" success="True" time="0.000" asserts="4" />
              <test-case name="UnitTest.TestUtils.testLowerBound" executed="True" success="True" time="0.001" asserts="11" />
              <test-case name="UnitTest.TestUtils.testModdedLong" executed="True" success="True" time="0.001" asserts="400" />
              <test-case name="UnitTest.TestUtils.testModdedLong2" executed="True" success="True" time="0.001" asserts="501" />
              <test-case name="UnitTest.TestUtils.testPow" executed="True" success="True" time="0.000" asserts="100" />
              <test-case name="UnitTest.TestUtils.testPow2" executed="True" success="True" time="0.000" asserts="100" />
              <test-case name="UnitTest.TestUtils.testToStringFrac" executed="True" success="True" time="0.000" asserts="1" />
            </results>
          </test-suite>
          <test-suite name="TestWheel" success="True" time="0.127" asserts="0">
            <results>
              <test-case name="UnitTest.TestWheel.TestCompare" executed="True" success="True" time="0.121" asserts="100" />
              <test-case name="UnitTest.TestWheel.TestCopyArray" executed="True" success="True" time="0.000" asserts="2" />
              <test-case name="UnitTest.TestWheel.TestP" executed="True" success="True" time="0.001" asserts="2" />
              <test-case name="UnitTest.TestWheel.TestPij_bruteforce" executed="True" success="True" time="0.000" asserts="4" />
              <test-case name="UnitTest.TestWheel.TestPijk_bruteForce" executed="True" success="True" time="0.001" asserts="1" />
              <test-case name="UnitTest.TestWheel.TestPijk_bruteForce2" executed="True" success="True" time="0.000" asserts="1" />
              <test-case name="UnitTest.TestWheel.TestRBruteForce" executed="True" success="True" time="0.001" asserts="2" />
              <test-case name="UnitTest.TestWheel.TestSimulatePermutation" executed="True" success="True" time="0.000" asserts="3" />
            </results>
          </test-suite>
          <test-suite name="TestXSpot" success="True" time="0.169" asserts="0">
            <results>
              <test-case name="UnitTest.TestXSpot.TestColinear" executed="True" success="True" time="0.159" asserts="12" />
              <test-case name="UnitTest.TestXSpot.TestSmallAngle" executed="True" success="True" time="0.010" asserts="2" />
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite name="UnitTest1B" success="True" time="0.203" asserts="0">
        <results>
          <test-suite name="TestDiamond" success="True" time="0.200" asserts="0">
            <results>
              <test-case name="UnitTest1B.TestDiamond.TestDiamondInfo" executed="True" success="True" time="0.000" asserts="16" />
              <test-case name="UnitTest1B.TestDiamond.TestDiamondProb2" executed="True" success="True" time="0.060" asserts="5" />
              <test-case name="UnitTest1B.TestDiamond.TestDiamondProb3" executed="True" success="True" time="0.044" asserts="7" />
              <test-case name="UnitTest1B.TestDiamond.TestDiamondProb4" executed="True" success="True" time="0.043" asserts="5" />
              <test-case name="UnitTest1B.TestDiamond.TestDiamondProb5" executed="True" success="True" time="0.051" asserts="3" />
            </results>
          </test-suite>
          <test-suite name="TestPascals" success="True" time="0.002" asserts="0">
            <results>
              <test-case name="UnitTest1B.TestPascals.testBasic" executed="True" success="True" time="0.001" asserts="15" />
              <test-case name="UnitTest1B.TestPascals.testProb" executed="True" success="True" time="0.000" asserts="15" />
            </results>
          </test-suite>
        </results>
      </test-suite>
    </results>
  </test-suite>
</test-results>